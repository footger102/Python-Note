#gotcha : a counterintuitive feature of a programming language that often leads to mistakes in programs
#예시는 다음과 같습니다.


  def createStudent(name, age, grades=[]):
    return {
        'name': name,
        'age': age,
        'grades': grades
    }
    
  def addGrade(student, grade):
    student['grades'].append(grade)
    print(student['grades'])
    
  addGrade(chrisley, 90)
  addGrade(dallas, 100)
  
  
# 이것의 결과는 [90]; [100]이 아니라 [90]; [90, 100]입니다. 왜 그럴까요? 직관에 반하는 결과가 나온건데 이런걸 gotcha라고 합니다.
# 이것이 왜 그러냐면..
# 파이썬에는 mutable object(ex. list, set, dictionary)와 immutable object(ex. int, float tuple, string)으로 나뉩니다.
# 그러니까 우리가 function을 정의할 때, parameter의 default value를 한 번 정하면, 그게 계속 쓰여서 그렇습니다.
# codecademy의 표현을 따르면 : when we call a function, the default values we provide for parameters are noly created once, and used for each subsequent call of the function.
# memory id를 확인하면 더 정확합니다.


  print(id(chrisley['grades']))
  print(id(dallas['grades']))
  
  #output
  139828567365696
  139828567365696


# id는 컴퓨터마다 다릅니다. 이걸 어떻게 해결해야 할까요? None value를 이용하면 됩니다.
# After we check whether an argument was provided, we can instantiate a new list if it wasn’t.
# We can use None as a speciali value to indicate we did not receive anything.


  def createStudent(name, age, grades=None):
    if grades is None:
      grades = []
    return {
      'name': name,
      'age': age,
      'grades': grades
    }
 
  def addGrade(student, grade):
    student['grades'].append(grade)
    # To help visualize the grades we have added a print statement
    print(student['grades'])
    
# 이게 mutable default arguments의 issue를 피하기 위한 most common way입니다. 




#  Funtional Argument : *arg

#  매개변수 앞에 *를 붙이면 입력값을 모아 tuple로 만듭니다.

  def my_function(*args):
    print(args)
    
  my_function('Arg1', 245, False)
  
  # output : ('Arg1', 245, False)
  
# 이거는 어떨 때 도움이 되냐면, 함수를 정의할 때 몇 개의 input이 들어올 지 모르니까, *(unpacking operator)를 이용해서 input 개수에 제한없이 함수를 정의할 수 있다. 

  def print_order(*order_items):
    print(order_items)

  print_order('Orange Juice', 'Apple Juice', 'Scrambled Eggs', 'Pancakes')
  
# Keywords Arguments : **kwarg
# 매개변수 앞에 **(keywords arguments)를 붙이면 x = 1 형태가 {x : 1}의 dictionary로 저장됨

  def func(**kwarg):
    print(kwarg)
    
  func(x = 1)
  
  # output : {x : 1}
  

# 함수를 정의할 때뿐만 아니라, function을 call할 때도 *나 **를 사용할 수 있다. 

  my_num_list = [3, 6, 9]
 
  def sum(num1, num2, num3):
    print(num1 + num2 + num3)
 
  sum(*my_num_list)

  # output : 18
  # function definition에서 unpacking operator를 쓰면 comma로 분류되는 input들이 tuple로 모아지는 건데
  # function call할 때 *를 쓰면 tuple이나 list가 comma로 분류되는 것이다.
  
  numbers  = {'num1': 3, 'num2': 6, 'num3': 9}
 
  def sum(num1, num2, num3):
    print(num1 + num2 + num3)
 
  sum(**numbers)
  
  # output : 18
  # function definition에서 **를 쓰면 variable = input의 형태가 {variable : input}의 dictionary로 바뀌는 것인데
  # function call할 때 **를 쓰면 {variable : input}의 dictionary가 variable = input으로 바뀐다. 

# 이게 외않됄까?

  def func(**kwargs, param1):
    pass
    
# 코드아카데미의 해설 : Correct! This would be invalid since no keyword arguments can proceed **kwargs and would produce a SyntaxError.
# func(x = 1, 5) 이렇게 call하면 되는 거 아닌가? 이게 외않돼지?

# 프로젝트하면서 새로 알게 된 것들

  x, y = (0, 1)
  <=> x = 1, y = 2
  # tuple을 다른 변수로 분리 가능. 이건 unpacking operator 쓰는 게 오히려 더 불편하다.

  # import 기능으로 다른 파일의 데이터도 가져올 수 있다.
  
  # return output1, output2, ... 의 형태로 함수의 출력을 여러 개로 설정할 수 있다. 이렇게 하면 함수의 출력이 tuple로 저장된다. 

